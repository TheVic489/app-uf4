{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class UsersServiceService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n    this.myUsersArray = [];\n    // Métodos que generen/devuelvan datos\n    this.auxiliar = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', 'Musica', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer', 'Accesoris', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Casat/da', 'Hombre', '', 'True')];\n    this.usernames = [\"Juan\", \"Pedro\", \"Miguel\", \"Andrés\", \"María\"];\n    this.correos = [\"gmail.com\", \"hotmail.com\", \"yahoo.com\", \"outlook.com\"];\n    this.contraseñas = [\"contra\", \"seña\", \"pass04\", \"pass02\", \"pass03\"];\n    this.roles = ['comprador', 'admin', 'staff'];\n    this.estadoCivil = ['Soltero/a', 'Divorciat/da', 'Casat/da'];\n    this.genders = ['Hombre', 'Mujer', 'Prefriero no decirlo'];\n  }\n  getUsers() {\n    for (let i = 0; i < 50; i++) {\n      let usuario = {\n        username: this.usernames[Math.floor(Math.random() * this.usernames.length)],\n        password: this.contraseñas[Math.floor(Math.random() * this.contraseñas.length)],\n        email: `usuario${i}@${this.correos[Math.floor(Math.random() * this.correos.length)]}`,\n        role: this.roles[Math.floor(Math.random() * this.roles.length)],\n        civilStatus: this.estadoCivil[Math.floor(Math.random() * this.estadoCivil.length)],\n        gender: this.genders[Math.floor(Math.random() * this.genders.length)],\n        info: '',\n        conditions: true\n      };\n      this.myUsersArray.push(usuario);\n    }\n  }\n  // Validate and return role of user\n  validateUser(usern, pass) {\n    let role = '';\n    this.myUsersArray.forEach(user => {\n      if (user.username === usern && user.password === pass) {\n        role = user.role;\n        console.log(pass);\n        console.log(usern);\n        this.cookieService.set('username', user.username);\n        this.cookieService.set('role', user.role);\n      } else {\n        console.log('login incorrect');\n      }\n    });\n    console.log(role);\n    return role;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)(i0.ɵɵinject(i1.CookieService));\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["User","UsersServiceService","constructor","cookieService","getUsers","i","usuario","username","usernames","Math","floor","random","length","password","contraseñas","email","correos","role","roles","civilStatus","estadoCivil","gender","genders","info","conditions","myUsersArray","push","validateUser","usern","pass","forEach","user","console","log","set","registerUser","user2reg","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor(private cookieService: CookieService) {}\n  myUsersArray: User[] = [];\n  // Métodos que generen/devuelvan datos\n\n  auxiliar: User[] = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat',    'Soltero/a',    'Hombre', 'Musica', 'True'),\n                      new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer',  'Accesoris', 'True'),\n                      new User('user03', 'pass01', 'comprador', 'maria@mail.cat',     'Casat/da',     'Hombre', '', 'True'),\n                          ];\n  usernames   = [\"Juan\", \"Pedro\", \"Miguel\", \"Andrés\", \"María\"];\n  correos     = [\"gmail.com\", \"hotmail.com\", \"yahoo.com\", \"outlook.com\"];\n  contraseñas = [\"contra\", \"seña\", \"pass04\", \"pass02\", \"pass03\"];\n  roles       = ['comprador', 'admin', 'staff']\n  estadoCivil = ['Soltero/a', 'Divorciat/da', 'Casat/da']\n  genders     = ['Hombre', 'Mujer', 'Prefriero no decirlo']\n  \n  getUsers() {\n    for (let i = 0; i < 50; i++) {\n      let usuario: User = {\n        username: this.usernames[Math.floor(Math.random() * this.usernames.length)],\n        password: this.contraseñas[Math.floor(Math.random() * this.contraseñas.length)],\n        email: `usuario${i}@${this.correos[Math.floor(Math.random() * this.correos.length)]}`,\n        role: this.roles[Math.floor(Math.random() * this.roles.length)],\n        civilStatus: this.estadoCivil[Math.floor(Math.random() * this.estadoCivil.length)],\n        gender: this.genders[Math.floor(Math.random() * this.genders.length)],\n        info: '',\n        conditions: true\n      };\n      this.myUsersArray.push(usuario);\n    }\n  }\n// Validate and return role of user\nvalidateUser(usern: any, pass: any): string {\n  let role = '';\n  this.myUsersArray.forEach(user => {\n    if (user.username === usern && user.password === pass) {\n      role = user.role\n      console.log(pass)\n      console.log(usern)\n\n      this.cookieService.set('username', user.username);\n      this.cookieService.set('role', user.role);\n\n    }else{\n      console.log('login incorrect');\n    } \n  });\n  \n  console.log(role)\n  return role\n}\n  registerUser(user2reg: User): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}