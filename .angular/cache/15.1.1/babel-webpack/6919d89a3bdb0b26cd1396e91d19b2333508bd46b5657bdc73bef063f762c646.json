{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nexport class UsersServiceService {\n  constructor() {\n    this.myUsersArray = [];\n  }\n  // Métodos que generen/devuelvan datos\n  getUsers() {\n    let auxiliar = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', '', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Soltero/a', 'Mujer', '', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Soltero/a', 'Hombre', '', 'True')];\n    for (let i = 0; i < 100; i++) {\n      let j = Math.floor(Math.random() * 3);\n      users.push(auxiliar[j]);\n    }\n    //  return users;\n  }\n  // Validate and return role of user\n  validateUser(user2validate) {\n    this.myUsersArray.forEach(User => {\n      if (User.username == dbUsername && password == dbPassword) {}\n    });\n    let role = '';\n    return role;\n  }\n  validateUsers(users, userToValidate) {\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].username === userToValidate.username && users[i].password === userToValidate.password) {\n        return true;\n      }\n    }\n    return false;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)();\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;AAKpC,OAAM,MAAOC,mBAAmB;EAC9BC;IACA,iBAAY,GAAa,EAAE;EADZ;EAGf;EACAC,QAAQ;IACN,IAAIC,QAAQ,GAAa,CAAC,IAAIJ,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAG,WAAW,EAAG,iBAAiB,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,EACjG,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAG,WAAW,EAAG,oBAAoB,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,CAAC,EACnG,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAG,WAAW,EAAG,gBAAgB,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,CAC/F;IAE3B,KAAK,IAAIK,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MACpC,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;MAErCC,KAAK,CAACC,IAAI,CAACP,QAAQ,CAACE,CAAC,CAAC,CAAC;;IAG5B;EACC;EACA;EACAM,YAAY,CAACC,aAAmB;IAC9B,IAAI,CAACC,YAAY,CAACC,OAAO,CAACf,IAAI,IAAG;MAE/B,IAAIA,IAAI,CAACgB,QAAQ,IAAIC,UAAU,IAAIC,QAAQ,IAAIC,UAAU,EAAE;IAI7D,CAAC,CAAC;IACF,IAAIC,IAAI,GAAG,EAAE;IAEb,OAAQA,IAAI;EACd;EAEAC,aAAa,CAACX,KAAK,EAAEY,cAAc;IACjC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACa,MAAM,EAAElB,CAAC,EAAE,EAAE;MACrC,IAAIK,KAAK,CAACL,CAAC,CAAC,CAACW,QAAQ,KAAKM,cAAc,CAACN,QAAQ,IAAIN,KAAK,CAACL,CAAC,CAAC,CAACa,QAAQ,KAAKI,cAAc,CAACJ,QAAQ,EAAE;QAClG,OAAO,IAAI;;;IAGf,OAAO,KAAK;EACd;EAEAM,YAAY,CAACC,QAAgB;IAC3B,IAAI,CAACX,YAAY,CAACH,IAAI,CAACc,QAAQ,CAAC;EAClC;;AA5CWxB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAyB,SAAnBzB,mBAAmB;EAAA0B,YAFlB;AAAM","names":["User","UsersServiceService","constructor","getUsers","auxiliar","i","j","Math","floor","random","users","push","validateUser","user2validate","myUsersArray","forEach","username","dbUsername","password","dbPassword","role","validateUsers","userToValidate","length","registerUser","user2reg","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor() {}\n  myUsersArray: object[] = []\n\n  // Métodos que generen/devuelvan datos\n  getUsers(): object[]|void {\n    let auxiliar: Object[] = [new User('user01', 'pass01' , 'comprador' , 'pepito@mail.cat', 'Soltero/a', 'Hombre', '', 'True'),\n                              new User('user02', 'pass01' , 'comprador' , 'alejandra@mail.cat', 'Soltero/a', 'Mujer', '', 'True'),\n                              new User('user03', 'pass01' , 'comprador' , 'maria@mail.cat', 'Soltero/a', 'Hombre', '', 'True'),\n                              ];\n\n    for (let i: number = 0; i < 100; i++) {\n      let j = Math.floor(Math.random() * 3);\n\n      users.push(auxiliar[j]);\n    }\n\n //  return users;\n  }\n  // Validate and return role of user\n  validateUser(user2validate: User): string {\n    this.myUsersArray.forEach(User => {\n      \n      if (User.username == dbUsername && password == dbPassword) {\n\n      }\n\n    });\n    let role = '';\n\n    return  role\n  }\n  \n  validateUsers(users, userToValidate) {\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].username === userToValidate.username && users[i].password === userToValidate.password) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  registerUser(user2reg: object): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}