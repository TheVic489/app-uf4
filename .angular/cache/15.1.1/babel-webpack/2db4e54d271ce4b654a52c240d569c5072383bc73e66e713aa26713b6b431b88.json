{"ast":null,"code":"import { User } from '../model/User';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserLoginRegisterService {\n  constructor(httpclient) {\n    this.httpclient = httpclient;\n    this.valorAlmacenado = '';\n    this.usuariStorage = localStorage;\n    this.url = 'http://localhost:3000';\n    this.usuariSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('usuari'))); //estat inicial del BehaviorSubject\n    this.usuario = this.usuariSubject.asObservable();\n  }\n  usuariData() {\n    return this.usuariSubject.value;\n  }\n  // Mètodes de conexió\n  validateLogin(username, password) {\n    // let user2validate = new User('',username,password,'','','',);\n    return this.httpclient.post(this.url + \"/login\", {\n      username: username,\n      password: password\n    }, {\n      responseType: 'json'\n    }).pipe(map(res => {\n      console.log(\"Resposta del servidor\");\n      console.log(JSON.stringify(res.resultats));\n      if (res != null) {\n        const user = new User(res.resultats.full_name, res.resultats.username, res.resultats.password, res.resultats.role, res.resultats.email, res.resultats.tel);\n        console.log(\"Objecte Usuari\");\n        console.log(res.accessToken);\n        localStorage.setItem('usuari', JSON.stringify(res.resultats));\n        localStorage.setItem('token', res.accessToken);\n        console.log(\"LocalStorage\");\n        console.log(localStorage.getItem('usuari'));\n        this.usuariSubject.next(user);\n      }\n      return res;\n    }));\n  }\n  getTableData() {\n    return this.httpclient.get('http://localhost:3000/api/bio_table');\n  }\n}\nUserLoginRegisterService.ɵfac = function UserLoginRegisterService_Factory(t) {\n  return new (t || UserLoginRegisterService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserLoginRegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserLoginRegisterService,\n  factory: UserLoginRegisterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAASC,eAAe,QAAoB,MAAM;AAClD,SAAoBC,GAAG,QAAO,gBAAgB;;;AAI9C,OAAM,MAAOC,wBAAwB;EAYnCC,YAAqBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAF/B,oBAAe,GAAG,EAAE;IACpB,kBAAa,GAAGC,YAAY;IAO5B,QAAG,GAAW,uBAAuB;IAJrC,IAAI,CAACC,aAAa,GAAG,IAAIN,eAAe,CAAOO,IAAI,CAACC,KAAK,CAACH,YAAY,CAACI,OAAO,CAAC,QAAQ,CAAE,CAAC,CAAC,CAAC;IAC5F,IAAI,CAACC,OAAO,GAAS,IAAI,CAACJ,aAAa,CAACK,YAAY,EAAE;EACtD;EAVOC,UAAU;IACf,OAAO,IAAI,CAACN,aAAa,CAACO,KAAK;EACjC;EAYA;EACAC,aAAa,CAACC,QAAa,EAAEC,QAAa;IACxC;IAEA,OAAO,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAM,IAAI,CAACC,GAAG,GAAC,QAAQ,EAAE;MAACH,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,EAAE;MAACG,YAAY,EAAE;IAAM,CAAC,CAAC,CAACC,IAAI,CACxHnB,GAAG,CAACoB,GAAG,IAAG;MACRC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpCD,OAAO,CAACC,GAAG,CAAChB,IAAI,CAACiB,SAAS,CAACH,GAAG,CAACI,SAAS,CAAC,CAAC;MAE1C,IAAGJ,GAAG,IAAE,IAAI,EAAC;QACX,MAAMK,IAAI,GAAQ,IAAI3B,IAAI,CAACsB,GAAG,CAACI,SAAS,CAACE,SAAS,EAAEN,GAAG,CAACI,SAAS,CAACV,QAAQ,EAAEM,GAAG,CAACI,SAAS,CAACT,QAAQ,EAAEK,GAAG,CAACI,SAAS,CAACG,IAAI,EAAEP,GAAG,CAACI,SAAS,CAACI,KAAK,EAAER,GAAG,CAACI,SAAS,CAACK,GAAG,CAAC;QAC/JR,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;QAC7BD,OAAO,CAACC,GAAG,CAAEF,GAAG,CAACU,WAAW,CAAE;QAC9B1B,YAAY,CAAC2B,OAAO,CAAC,QAAQ,EAACzB,IAAI,CAACiB,SAAS,CAACH,GAAG,CAACI,SAAS,CAAC,CAAC;QAC5DpB,YAAY,CAAC2B,OAAO,CAAC,OAAO,EAAEX,GAAG,CAACU,WAAW,CAAE;QAE/CT,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BD,OAAO,CAACC,GAAG,CAAClB,YAAY,CAACI,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,CAACH,aAAa,CAAC2B,IAAI,CAACP,IAAI,CAAC;;MAE/B,OAAOL,GAAG;IAEZ,CAAC,CAAC,CAEH;EACH;EAEAa,YAAY;IACV,OAAO,IAAI,CAAC9B,UAAU,CAAC+B,GAAG,CAAC,qCAAqC,CAAC;EACnE;;AAlDWjC,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;SAAxBA,wBAAwB;EAAAkC,SAAxBlC,wBAAwB;EAAAmC,YAFvB;AAAM","names":["User","BehaviorSubject","map","UserLoginRegisterService","constructor","httpclient","localStorage","usuariSubject","JSON","parse","getItem","usuario","asObservable","usuariData","value","validateLogin","username","password","post","url","responseType","pipe","res","console","log","stringify","resultats","user","full_name","role","email","tel","accessToken","setItem","next","getTableData","get","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/app-uf4/src/app/services/user-login-register.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { User } from '../model/User';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserLoginRegisterService {\n\n  //per a la sincronització\n  private usuariSubject: BehaviorSubject<User>;\n  public  usuario: Observable<User>; \n  \n  public usuariData():User{\n    return this.usuariSubject.value;\n  }\n\n  valorAlmacenado = ''\n  usuariStorage = localStorage;\n  constructor( private httpclient: HttpClient) {   \n\n  this.usuariSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('usuari')!));//estat inicial del BehaviorSubject\n  this.usuario       = this.usuariSubject.asObservable();\n  }\n\n  url: string = 'http://localhost:3000'\n\n  // Mètodes de conexió\n  validateLogin(username: any, password: any): Observable<any> { \n    // let user2validate = new User('',username,password,'','','',);\n\n    return this.httpclient.post<any>(this.url+\"/login\", {username: username, password: password}, {responseType: 'json'}).pipe(\n      map(res =>{\n        console.log(\"Resposta del servidor\");\n        console.log(JSON.stringify(res.resultats));\n\n        if(res!=null){\n          const user:User = new User(res.resultats.full_name ,res.resultats.username, res.resultats.password, res.resultats.role, res.resultats.email, res.resultats.tel);\n          console.log(\"Objecte Usuari\");\n          console.log((res.accessToken));\n          localStorage.setItem('usuari',JSON.stringify(res.resultats));\n          localStorage.setItem('token',(res.accessToken));\n\n          console.log(\"LocalStorage\");\n          console.log(localStorage.getItem('usuari'));\n\n          this.usuariSubject.next(user);\n        }\n        return res;\n\n      })\n\n    );\n  }\n  \n  getTableData(): Observable<any> {\n    return this.httpclient.get('http://localhost:3000/api/bio_table');\n  }\n  // checkSession(){ \n  //   const valorAlmacenado = localStorage.getItem('usuari');\n  //   this.usuariStorage = JSON.parse(this.valorAlmacenado);\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}