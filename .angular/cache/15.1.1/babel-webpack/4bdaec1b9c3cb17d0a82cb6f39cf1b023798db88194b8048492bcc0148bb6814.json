{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nexport class UsersServiceService {\n  constructor() {\n    this.myUsersArray = [];\n  }\n  // Métodos que generen/devuelvan datos\n  getUsers() {\n    let auxiliar = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', 'Musica', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer', 'Accesoris', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Casat/da', 'Hombre', '', 'True')];\n    for (let i = 0; i < 20; i++) {\n      let j = Math.floor(Math.random() * 3);\n      this.myUsersArray.push(auxiliar[j]);\n    }\n  }\n  // Validate and return role of user\n  validateUser(user2validate) {\n    let role = '';\n    this.myUsersArray.forEach(user => {\n      if (user.username === user2validate.username && user.password === user2validate.password) {\n        role = user2validate.role;\n      }\n    });\n    return role;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)();\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;AAKpC,OAAM,MAAOC,mBAAmB;EAC9BC;IAEA,iBAAY,GAAW,EAAE;EAFV;EAGf;EACAC,QAAQ;IACN,IAAIC,QAAQ,GAAW,CAAC,IAAIJ,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,iBAAiB,EAAK,WAAW,EAAK,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAC3G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,cAAc,EAAE,OAAO,EAAG,WAAW,EAAE,MAAM,CAAC,EAC9G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAM,UAAU,EAAM,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,CACpG;IAEzB,KAAK,IAAIK,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACnC,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;MAErC,IAAI,CAACC,YAAY,CAACC,IAAI,CAACP,QAAQ,CAACE,CAAC,CAAC,CAAC;;EAEvC;EACA;EACAM,YAAY,CAACC,aAAmB;IAC9B,IAAIC,IAAI,GAAG,EAAE;IACb,IAAI,CAACJ,YAAY,CAACK,OAAO,CAACC,IAAI,IAAG;MAC/B,IAAIA,IAAI,CAACC,QAAQ,KAAKJ,aAAa,CAACI,QAAQ,IAAID,IAAI,CAACE,QAAQ,KAAKL,aAAa,CAACK,QAAQ,EAAE;QACxFJ,IAAI,GAAGD,aAAa,CAACC,IAAI;;IAE7B,CAAC,CAAC;IACF,OAAOA,IAAI;EACb;EAEAK,YAAY,CAACC,QAAc;IACzB,IAAI,CAACV,YAAY,CAACC,IAAI,CAACS,QAAQ,CAAC;EAClC;;AA9BWnB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAoB,SAAnBpB,mBAAmB;EAAAqB,YAFlB;AAAM","names":["User","UsersServiceService","constructor","getUsers","auxiliar","i","j","Math","floor","random","myUsersArray","push","validateUser","user2validate","role","forEach","user","username","password","registerUser","user2reg","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor() {}\n\n  myUsersArray: User[] = []\n  // Métodos que generen/devuelvan datos\n  getUsers(){\n    let auxiliar: User[] = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat',    'Soltero/a',    'Hombre', 'Musica', 'True'),\n                            new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer',  'Accesoris', 'True'),\n                            new User('user03', 'pass01', 'comprador', 'maria@mail.cat',     'Casat/da',     'Hombre', '', 'True'),\n                            ];\n\n    for (let i: number = 0; i < 20; i++) {\n      let j = Math.floor(Math.random() * 3);\n\n      this.myUsersArray.push(auxiliar[j]);\n    }\n  }\n  // Validate and return role of user\n  validateUser(user2validate: User): string {\n    let role = '';\n    this.myUsersArray.forEach(user => {\n      if (user.username === user2validate.username && user.password === user2validate.password) {\n        role = user2validate.role\n      } \n    });\n    return role\n  }\n\n  registerUser(user2reg: User): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}