{"ast":null,"code":"import { NG_VALIDATORS } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\n// DIRECTIVA PARA VALIDAR QUE SE REPITE LA CONTRASEÑA CORRECTAMENTE \nexport class ValidateRepPassDirective {\n  constructor() {}\n  validate(control) {\n    if (control && control.value != this.parametro) {\n      return {\n        'samePass': true\n      };\n    } else {\n      return null;\n    }\n  }\n}\nValidateRepPassDirective.ɵfac = function ValidateRepPassDirective_Factory(t) {\n  return new (t || ValidateRepPassDirective)();\n};\nValidateRepPassDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: ValidateRepPassDirective,\n  selectors: [[\"\", \"appValidateRepPass\", \"\"]],\n  inputs: {\n    parametro: \"parametro\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALIDATORS,\n    useExisting: ValidateRepPassDirective,\n    multi: true\n  }])]\n});","map":{"version":3,"mappings":"AACA,SAA0BA,aAAa,QAAqC,gBAAgB;;AAE5F;AAMA,OAAM,MAAOC,wBAAwB;EAGnCC,eAAgB;EAChBC,QAAQ,CAACC,OAAwB;IAE/B,IAAIA,OAAO,IAAIA,OAAO,CAACC,KAAK,IAAG,IAAI,CAACC,SAAS,EAAE;MAC7C,OAAO;QACL,UAAU,EAAE;OACb;KACF,MAAI;MACH,OAAO,IAAI;;EAEf;;AAbWL,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAM;EAAAC;IAAAF;EAAA;EAAAG,iCAFxB,CAAC;IAACC,OAAO,EAAEV,aAAa;IAAEW,WAAW,EAAEV,wBAAwB;IAAEW,KAAK,EAAE;EAAI,CAAC,CAAC;AAAA","names":["NG_VALIDATORS","ValidateRepPassDirective","constructor","validate","control","value","parametro","selectors","inputs","features","provide","useExisting","multi"],"sourceRoot":"","sources":["/home/vic/app-uf4/src/app/directives/validate-rep-pass.directive.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\n\n// DIRECTIVA PARA VALIDAR QUE SE REPITE LA CONTRASEÑA CORRECTAMENTE \n\n@Directive({\n  selector: '[appValidateRepPass]',\n  providers: [{provide: NG_VALIDATORS, useExisting: ValidateRepPassDirective, multi: true}]\n})\nexport class ValidateRepPassDirective {\n\n  @Input() parametro: any;\n  constructor() { }\n  validate(control: AbstractControl): ValidationErrors | null {\n    \n    if (control && control.value!= this.parametro) {\n      return {\n        'samePass': true\n      }  \n    }else{\n      return null\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}