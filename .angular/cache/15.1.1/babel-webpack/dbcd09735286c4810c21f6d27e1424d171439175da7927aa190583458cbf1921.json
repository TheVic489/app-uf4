{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// Comoponente de los Eventos\nlet EsdevenimentsComponent = class EsdevenimentsComponent {\n  constructor(\n  // --> per injectar, serveis, cookies, router\n  serviceUser, cookieService, router, listeventService) {\n    this.serviceUser = serviceUser;\n    this.cookieService = cookieService;\n    this.router = router;\n    this.listeventService = listeventService;\n    this.page = 1;\n  }\n  ngOnInit() {\n    // Execute Handle session\n    this.handleSesison();\n    // Get events list\n    this.events = this.listeventService.getEvents();\n    //Get Role\n    this.myRole = this.serviceUser.getCookieRole();\n    this.itXpage = 10;\n    this.filterByName = \"\";\n    this.filterByPrice = 100;\n    this.filterEvents = this.events;\n  }\n  // Deletes row for button\n  deleteRow(element) {\n    this.filterEvents = this.filterEvents.filter(delEvent => delEvent != element);\n  }\n  filter() {\n    this.filterEvents = this.events.filter(value => {\n      if (value.name.indexOf(this.filterByName) != -1) {\n        if (value.price <= this.filterByPrice) return true;\n      }\n      return false;\n    });\n  }\n  handleSesison() {\n    /// HANDLE SESSION ///\n    // Reload page to show logout button\n    if (sessionStorage.getItem('reloaded') === null) {\n      sessionStorage.setItem('reloaded', 'true');\n      window.location.reload();\n    }\n    // If it's not logged, redirect to login\n    this.isLogged = this.serviceUser.checkCookieSession();\n    if (!this.isLogged) {\n      this.router.navigate(['/login']);\n    }\n  }\n};\nEsdevenimentsComponent = __decorate([Component({\n  selector: 'app-esdeveniments',\n  templateUrl: './esdeveniments.component.html',\n  styleUrls: ['./esdeveniments.component.css']\n})], EsdevenimentsComponent);\nexport { EsdevenimentsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAkB,eAAe;AAOnD;AAOO,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EACjCC;EAAa;EACHC,WAAgC,EAChCC,aAA4B,EAC5BC,MAAc,EACdC,gBAA0C;IAH1C,gBAAW,GAAXH,WAAW;IACX,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IACN,qBAAgB,GAAhBC,gBAAgB;IAM1B,SAAI,GAAgB,CAAC;EALlB;EAYHC,QAAQ;IACN;IACA,IAAI,CAACC,aAAa,EAAE;IACpB;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,gBAAgB,CAACI,SAAS,EAAE;IAE/C;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACR,WAAW,CAACS,aAAa,EAAE;IAE9C,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,aAAa,GAAG,GAAG;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACP,MAAM;EACjC;EACA;EACAQ,SAAS,CAACC,OAAY;IACpB,IAAI,CAACF,YAAY,GAAG,IAAI,CAACA,YAAY,CAACG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,IAAIF,OAAO,CAAC;EAC/E;EAEAC,MAAM;IACJ,IAAI,CAACH,YAAY,GAAG,IAAI,CAACP,MAAM,CAACU,MAAM,CAACE,KAAK,IAAG;MAE7C,IAAGA,KAAK,CAACC,IAAI,CAACC,OAAO,CAAC,IAAI,CAACT,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;QAC9C,IAAGO,KAAK,CAACG,KAAK,IAAI,IAAI,CAACT,aAAa,EACpC,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC;EACJ;EAGAP,aAAa;IACX;IAEA;IACA,IAAIiB,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;MAC/CD,cAAc,CAACE,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;MAC1CC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;;IAE1B;IACA,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAC5B,WAAW,CAAC6B,kBAAkB,EAAE;IACrD,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAE;MAClB,IAAI,CAAC1B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;CACD;AA/DYhC,sBAAsB,eALlCD,SAAS,CAAC;EACTkC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWnC,sBAAsB,CA+DlC;SA/DYA,sBAAsB","names":["Component","EsdevenimentsComponent","constructor","serviceUser","cookieService","router","listeventService","ngOnInit","handleSesison","events","getEvents","myRole","getCookieRole","itXpage","filterByName","filterByPrice","filterEvents","deleteRow","element","filter","delEvent","value","name","indexOf","price","sessionStorage","getItem","setItem","window","location","reload","isLogged","checkCookieSession","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/esdeveniments/esdeveniments.component.ts"],"sourcesContent":["import { Component, OnInit }   from '@angular/core';\nimport { UsersServiceService } from 'src/app/services/users-service.service';\nimport { ListEventsServiceService } from 'src/app/services/list-events-service.service';\nimport { CookieService }       from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\nimport { Event }  from '../model/Esdeveniments';\nimport { trigger } from '@angular/animations';\n// Comoponente de los Eventos\n\n@Component({\n  selector: 'app-esdeveniments',\n  templateUrl: './esdeveniments.component.html',\n  styleUrls: ['./esdeveniments.component.css'],\n})\nexport class EsdevenimentsComponent implements OnInit {\n  constructor( // --> per injectar, serveis, cookies, router\n    private serviceUser: UsersServiceService,\n    private cookieService: CookieService,\n    private router: Router,\n    private listeventService: ListEventsServiceService\n  ) {}\n  \n  // Init Variables\n  isLogged!: boolean;\n  events!:   Event[];\n  page:      number = 1;\n  myRole!:   string;\n  itXpage!:  number;\n\n  filterEvents!:  Event[];\n  filterByName!: string;\n  filterByPrice!: number ;\n  ngOnInit() {\n    // Execute Handle session\n    this.handleSesison();\n    // Get events list\n    this.events = this.listeventService.getEvents()\n    \n    //Get Role\n    this.myRole = this.serviceUser.getCookieRole();\n  \n    this.itXpage = 10;\n    this.filterByName = \"\";\n    this.filterByPrice = 100;\n    this.filterEvents = this.events;\n  }\n  // Deletes row for button\n  deleteRow(element: any): void {\n    this.filterEvents = this.filterEvents.filter(delEvent => delEvent != element)    \n  }\n  \n  filter() {\n    this.filterEvents = this.events.filter(value => {\n\n      if(value.name.indexOf(this.filterByName) != -1) {\n        if(value.price <= this.filterByPrice)\n        return true;\n      }\n      return false;\n    });\n  }\n\n\n  handleSesison(): void{\n    /// HANDLE SESSION ///\n\n    // Reload page to show logout button\n    if (sessionStorage.getItem('reloaded') === null) {\n      sessionStorage.setItem('reloaded', 'true');\n      window.location.reload();\n    }\n    // If it's not logged, redirect to login\n    this.isLogged = this.serviceUser.checkCookieSession();\n    if (!this.isLogged) { \n      this.router.navigate(['/login']);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}