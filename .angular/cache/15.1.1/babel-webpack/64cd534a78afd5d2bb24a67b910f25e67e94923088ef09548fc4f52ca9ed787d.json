{"ast":null,"code":"import { User } from '../model/User';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserLoginRegisterService {\n  constructor(httpclient) {\n    this.httpclient = httpclient;\n    this.url = 'http://localhost:3000';\n    this.usuariSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('usuari'))); //estat inicial del BehaviorSubject\n    this.usuario = this.usuariSubject.asObservable();\n  }\n  usuariData() {\n    return this.usuariSubject.value;\n  }\n  // Mètodes de conexió\n  validateLogin(username, password) {\n    // let user2validate = new User('',username,password,'','','',);\n    return this.httpclient.post(this.url + \"/login\", {\n      username: username,\n      password: password\n    }, {\n      responseType: 'json'\n    }).pipe(map(res => {\n      console.log(\"Resposta del servidor\");\n      console.log(JSON.stringify(res));\n      if (res != null) {\n        const user = new User(res.full_name, res.username, res.password, res.role, res.email, res.tel);\n        console.log(\"Objecte Usuari\");\n        console.log(user);\n        localStorage.setItem('usuari', JSON.stringify(res));\n        console.log(\"LocalStorage\");\n        console.log(localStorage.getItem('usuari'));\n        this.usuariSubject.next(user);\n      }\n      return res;\n    }));\n  }\n}\nUserLoginRegisterService.ɵfac = function UserLoginRegisterService_Factory(t) {\n  return new (t || UserLoginRegisterService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserLoginRegisterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserLoginRegisterService,\n  factory: UserLoginRegisterService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,eAAe;AACpC,SAASC,eAAe,QAAoB,MAAM;AAClD,SAAoBC,GAAG,QAAO,gBAAgB;;;AAI9C,OAAM,MAAOC,wBAAwB;EAUnCC,YAAqBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAM/B,QAAG,GAAW,uBAAuB;IAJrC,IAAI,CAACC,aAAa,GAAG,IAAIL,eAAe,CAAOM,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,CAAC,CAAC,CAAC;IAC5F,IAAI,CAACC,OAAO,GAAS,IAAI,CAACL,aAAa,CAACM,YAAY,EAAE;EACtD;EAROC,UAAU;IACf,OAAO,IAAI,CAACP,aAAa,CAACQ,KAAK;EACjC;EAUA;EACAC,aAAa,CAACC,QAAa,EAAEC,QAAa;IACxC;IAEA,OAAO,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAO,IAAI,CAACC,GAAG,GAAC,QAAQ,EAAE;MAACH,QAAQ,EAAEA,QAAQ;MAAEC,QAAQ,EAAEA;IAAQ,CAAC,EAAE;MAACG,YAAY,EAAE;IAAM,CAAC,CAAC,CAACC,IAAI,CACzHnB,GAAG,CAACoB,GAAG,IAAG;MACRC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpCD,OAAO,CAACC,GAAG,CAACjB,IAAI,CAACkB,SAAS,CAACH,GAAG,CAAC,CAAC;MAEhC,IAAGA,GAAG,IAAE,IAAI,EAAC;QACX,MAAMI,IAAI,GAAQ,IAAI1B,IAAI,CAACsB,GAAG,CAACK,SAAS,EAAEL,GAAG,CAACN,QAAQ,EAAEM,GAAG,CAACL,QAAQ,EAAEK,GAAG,CAACM,IAAI,EAAEN,GAAG,CAACO,KAAK,EAAEP,GAAG,CAACQ,GAAG,CAAC;QACnGP,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;QAC7BD,OAAO,CAACC,GAAG,CAACE,IAAI,CAAC;QAEjBjB,YAAY,CAACsB,OAAO,CAAC,QAAQ,EAACxB,IAAI,CAACkB,SAAS,CAACH,GAAG,CAAC,CAAC;QAClDC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BD,OAAO,CAACC,GAAG,CAACf,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,CAACJ,aAAa,CAAC0B,IAAI,CAACN,IAAI,CAAC;;MAE/B,OAAOJ,GAAG;IAEZ,CAAC,CAAC,CAEH;EAIH;;AA9CWnB,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;SAAxBA,wBAAwB;EAAA8B,SAAxB9B,wBAAwB;EAAA+B,YAFvB;AAAM","names":["User","BehaviorSubject","map","UserLoginRegisterService","constructor","httpclient","usuariSubject","JSON","parse","localStorage","getItem","usuario","asObservable","usuariData","value","validateLogin","username","password","post","url","responseType","pipe","res","console","log","stringify","user","full_name","role","email","tel","setItem","next","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/app-uf4/src/app/services/user-login-register.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { User } from '../model/User';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {catchError, map} from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserLoginRegisterService {\n\n  //per a la sincronització\n  private usuariSubject: BehaviorSubject<User>;\n  public  usuario: Observable<User>; \n   \n  public usuariData():User{\n    return this.usuariSubject.value;\n  }\n\n  constructor( private httpclient: HttpClient) {   \n\n  this.usuariSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('usuari')!));//estat inicial del BehaviorSubject\n  this.usuario       = this.usuariSubject.asObservable();\n  }\n\n  url: string = 'http://localhost:3000'\n\n  // Mètodes de conexió\n  validateLogin(username: any, password: any): Observable<any> { \n    // let user2validate = new User('',username,password,'','','',);\n\n    return this.httpclient.post<User>(this.url+\"/login\", {username: username, password: password}, {responseType: 'json'}).pipe(\n      map(res =>{\n        console.log(\"Resposta del servidor\");\n        console.log(JSON.stringify(res));\n\n        if(res!=null){\n          const user:User = new User(res.full_name ,res.username, res.password, res.role, res.email, res.tel);\n          console.log(\"Objecte Usuari\");\n          console.log(user);\n          \n          localStorage.setItem('usuari',JSON.stringify(res));\n          console.log(\"LocalStorage\");\n          console.log(localStorage.getItem('usuari'));\n\n          this.usuariSubject.next(user);\n        }\n        return res;\n\n      })\n\n    );\n\n    \n  \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}