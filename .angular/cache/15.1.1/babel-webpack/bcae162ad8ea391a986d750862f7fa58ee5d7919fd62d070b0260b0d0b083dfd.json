{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class UsersServiceService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n    this.myUsersArray = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', 'Musica', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer', 'Accesoris', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Casat/da', 'Hombre', '', 'True')];\n    this.usernames = [\"Juan\", \"Pedro\", \"Miguel\", \"Andrés\", \"María\", \"user01\", \"user02\"];\n    this.correos = [\"gmail.com\", \"hotmail.com\", \"yahoo.com\", \"outlook.com\"];\n    this.contraseñas = [\"contra\", \"seña\", \"pass04\", \"pass02\", \"pass03\", \"pass01\"];\n    this.roles = ['comprador', 'admin', 'staff'];\n    this.estadoCivil = ['Soltero/a', 'Divorciat/da', 'Casat/da'];\n    this.genders = ['Hombre', 'Mujer', 'Prefriero no decirlo'];\n    this.info = ['', '', 'Accessoris', 'Música'];\n  }\n  // Validate and return role of user\n  validateUser(usern, pass) {\n    let role = '';\n    for (const user of this.myUsersArray) {\n      console.log(this.myUsersArray);\n      if (user.full_name === usern && user.username === pass) {\n        role = user.password;\n        this.cookieService.set('username', user.full_name);\n        this.cookieService.set('role', user.password);\n      }\n    }\n    ;\n    return role;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n  /**\n   * Check if cookie role exists\n   * @returns Boolean, True if exists, false otherwise\n   */\n  checkCookieSession() {\n    return this.cookieService.check('role');\n  }\n  // Get and return Cookie role value\n  getCookieRole() {\n    return this.cookieService.get('role');\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)(i0.ɵɵinject(i1.CookieService));\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;;AAMpC,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IACjC,iBAAY,GAAW,CAAC,IAAIH,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,iBAAiB,EAAK,WAAW,EAAK,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAC3G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,cAAc,EAAE,OAAO,EAAG,WAAW,EAAE,MAAM,CAAC,EAC9G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAM,UAAU,EAAM,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,CACzH;IAEJ,cAAS,GAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAChF,YAAO,GAAO,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,aAAa,CAAC;IACtE,gBAAW,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACxE,UAAK,GAAS,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC;IAC7C,gBAAW,GAAG,CAAC,WAAW,EAAE,cAAc,EAAE,UAAU,CAAC;IACvD,YAAO,GAAO,CAAC,QAAQ,EAAE,OAAO,EAAE,sBAAsB,CAAC;IACzD,SAAI,GAAU,CAAC,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,QAAQ,CAAC;EAZK;EAcrD;EACAI,YAAY,CAACC,KAAU,EAAEC,IAAS;IAChC,IAAIC,IAAI,GAAG,EAAE;IACb,KAAK,MAAMC,IAAI,IAAI,IAAI,CAACC,YAAY,EAAE;MACpCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,YAAY,CAAC;MAC9B,IAAID,IAAI,CAACI,SAAS,KAAKP,KAAK,IAAIG,IAAI,CAACK,QAAQ,KAAKP,IAAI,EAAE;QACtDC,IAAI,GAAGC,IAAI,CAACM,QAAQ;QACpB,IAAI,CAACX,aAAa,CAACY,GAAG,CAAC,UAAU,EAAEP,IAAI,CAACI,SAAS,CAAC;QAClD,IAAI,CAACT,aAAa,CAACY,GAAG,CAAC,MAAM,EAAEP,IAAI,CAACM,QAAQ,CAAC;;;IAEhD;IACD,OAAOP,IAAI;EACb;EACES,YAAY,CAACC,QAAc;IACzB,IAAI,CAACR,YAAY,CAACS,IAAI,CAACD,QAAQ,CAAC;EAClC;EAEA;;;;EAIAE,kBAAkB;IAChB,OAAO,IAAI,CAAChB,aAAa,CAACiB,KAAK,CAAC,MAAM,CAAC;EACzC;EAEA;EACAC,aAAa;IACX,OAAO,IAAI,CAAClB,aAAa,CAACmB,GAAG,CAAC,MAAM,CAAC;EACvC;;AA3CWrB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAsB,SAAnBtB,mBAAmB;EAAAuB,YAFlB;AAAM","names":["User","UsersServiceService","constructor","cookieService","validateUser","usern","pass","role","user","myUsersArray","console","log","full_name","username","password","set","registerUser","user2reg","push","checkCookieSession","check","getCookieRole","get","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/app-uf4/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor(private cookieService: CookieService) {}\n  myUsersArray: User[] = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat',    'Soltero/a',    'Hombre', 'Musica', 'True'),\n                          new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer',  'Accesoris', 'True'),\n                          new User('user03', 'pass01', 'comprador', 'maria@mail.cat',     'Casat/da',     'Hombre', '', 'True'),\n     ];\n\n  usernames   = [\"Juan\", \"Pedro\", \"Miguel\", \"Andrés\", \"María\", \"user01\", \"user02\"];\n  correos     = [\"gmail.com\", \"hotmail.com\", \"yahoo.com\", \"outlook.com\"];\n  contraseñas = [\"contra\", \"seña\", \"pass04\", \"pass02\", \"pass03\", \"pass01\"];\n  roles       = ['comprador', 'admin', 'staff']\n  estadoCivil = ['Soltero/a', 'Divorciat/da', 'Casat/da']\n  genders     = ['Hombre', 'Mujer', 'Prefriero no decirlo']\n  info        = ['', '', 'Accessoris', 'Música']\n  \n// Validate and return role of user\nvalidateUser(usern: any, pass: any): string {\n  let role = '';\n  for (const user of this.myUsersArray) {\n    console.log(this.myUsersArray)\n    if (user.full_name === usern && user.username === pass) {\n      role = user.password\n      this.cookieService.set('username', user.full_name);\n      this.cookieService.set('role', user.password);\n    }\n  };\n  return role\n}\n  registerUser(user2reg: User): any {\n    this.myUsersArray.push(user2reg);\n  }\n\n  /**\n   * Check if cookie role exists\n   * @returns Boolean, True if exists, false otherwise\n   */\n  checkCookieSession(): boolean {\n    return this.cookieService.check('role');\n  }\n  \n  // Get and return Cookie role value\n  getCookieRole(): string {\n    return this.cookieService.get('role')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}