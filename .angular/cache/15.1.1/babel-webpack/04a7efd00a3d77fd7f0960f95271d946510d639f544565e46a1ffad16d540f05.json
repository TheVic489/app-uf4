{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nexport class UsersServiceService {\n  constructor() {\n    this.myUsersArray = [];\n  }\n  // Métodos que generen/devuelvan datos\n  getUsers() {\n    let users = [];\n    let user = new User('pepitogrillo', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', '', 'True');\n    let auxiliar = ['manzanas', 'fresas', 'sandias', 'peras'];\n    for (let i = 0; i < 100; i++) {\n      let j = Math.floor(Math.random() * 2);\n      users.push(auxiliar[j]);\n    }\n    //  return users;\n  }\n  // VAlidate and return role of user\n  validateUser(username, password) {\n    let role = '';\n    return role;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)();\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;AAKpC,OAAM,MAAOC,mBAAmB;EAC9BC;IAEA,iBAAY,GAAa,EAAE;EAFZ;EAIf;EACAC,QAAQ;IACN,IAAIC,KAAK,GAAgB,EAAE;IAC3B,IAAIC,IAAI,GAAiB,IAAIL,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAG,WAAW,EAAG,iBAAiB,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC;IAChI,IAAIM,QAAQ,GAAa,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;IAEnE,KAAK,IAAIC,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MACpC,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;MAErCP,KAAK,CAACQ,IAAI,CAACN,QAAQ,CAACE,CAAC,CAAC,CAAC;;IAG5B;EACC;EACA;EACAK,YAAY,CAACC,QAAgB,EAAEC,QAAgB;IAE7C,IAAIC,IAAI,GAAG,EAAE;IAEb,OAAQA,IAAI;EACd;EAEAC,YAAY,CAACC,QAAgB;IAC3B,IAAI,CAACC,YAAY,CAACP,IAAI,CAACM,QAAQ,CAAC;EAClC;;AA7BWjB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAmB,SAAnBnB,mBAAmB;EAAAoB,YAFlB;AAAM","names":["User","UsersServiceService","constructor","getUsers","users","user","auxiliar","i","j","Math","floor","random","push","validateUser","username","password","role","registerUser","user2reg","myUsersArray","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor() {}\n\n  myUsersArray: object[] = []\n\n  // Métodos que generen/devuelvan datos\n  getUsers(): object[]|void {\n    let users:    string[] = [];\n    let user:     User     = new User('pepitogrillo', 'pass01' , 'comprador' , 'pepito@mail.cat', 'Soltero/a', 'Hombre', '', 'True');\n    let auxiliar: string[] = ['manzanas', 'fresas', 'sandias', 'peras'];\n\n    for (let i: number = 0; i < 100; i++) {\n      let j = Math.floor(Math.random() * 2);\n\n      users.push(auxiliar[j]);\n    }\n\n //  return users;\n  }\n  // VAlidate and return role of user\n  validateUser(username: string, password: string): string {\n    \n    let role = '';\n\n    return  role\n  }\n\n  registerUser(user2reg: object): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}