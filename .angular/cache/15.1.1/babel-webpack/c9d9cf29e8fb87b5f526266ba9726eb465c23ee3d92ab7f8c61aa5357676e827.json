{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class UsersServiceService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n    this.myUsersArray = [];\n  }\n  // Métodos que generen/devuelvan datos\n  getUsers() {\n    let auxiliar = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', 'Musica', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer', 'Accesoris', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Casat/da', 'Hombre', '', 'True')];\n    for (let i = 0; i < 20; i++) {\n      let j = Math.floor(Math.random() * 3);\n      this.myUsersArray.push(auxiliar[j]);\n    }\n  }\n  // Validate and return role of user\n  validateUser(usern, pass) {\n    let role = '';\n    this.myUsersArray.forEach(user => {\n      if (user.username === usern && user.password === pass) {\n        role = user.role;\n        console.log(pass);\n        console.log(usern);\n        this.cookieService.set('username', user.username);\n        this.cookieService.set('role', user.role);\n      }\n    });\n    console.log(role);\n    return role;\n  }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)(i0.ɵɵinject(i1.CookieService));\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;;AAMpC,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IACjC,iBAAY,GAAW,EAAE;EAD0B;EAEnD;EACAC,QAAQ;IACN,IAAIC,QAAQ,GAAW,CAAC,IAAIL,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,iBAAiB,EAAK,WAAW,EAAK,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EAC3G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,cAAc,EAAE,OAAO,EAAG,WAAW,EAAE,MAAM,CAAC,EAC9G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAM,UAAU,EAAM,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,CACpG;IAEzB,KAAK,IAAIM,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MACnC,IAAIC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,CAAC;MAErC,IAAI,CAACC,YAAY,CAACC,IAAI,CAACP,QAAQ,CAACE,CAAC,CAAC,CAAC;;EAEvC;EACA;EACAM,YAAY,CAACC,KAAU,EAAEC,IAAS;IAChC,IAAIC,IAAI,GAAG,EAAE;IAEb,IAAI,CAACL,YAAY,CAACM,OAAO,CAACC,IAAI,IAAG;MAC/B,IAAIA,IAAI,CAACC,QAAQ,KAAKL,KAAK,IAAII,IAAI,CAACE,QAAQ,KAAKL,IAAI,EAAE;QACrDC,IAAI,GAAGE,IAAI,CAACF,IAAI;QAChBK,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;QACjBM,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;QAElB,IAAI,CAACX,aAAa,CAACoB,GAAG,CAAC,UAAU,EAAEL,IAAI,CAACC,QAAQ,CAAC;QACjD,IAAI,CAAChB,aAAa,CAACoB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACF,IAAI,CAAC;;IAG7C,CAAC,CAAC;IACFK,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb;EAEAQ,YAAY,CAACC,QAAc;IACzB,IAAI,CAACd,YAAY,CAACC,IAAI,CAACa,QAAQ,CAAC;EAClC;;AArCWxB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAyB,SAAnBzB,mBAAmB;EAAA0B,YAFlB;AAAM","names":["User","UsersServiceService","constructor","cookieService","getUsers","auxiliar","i","j","Math","floor","random","myUsersArray","push","validateUser","usern","pass","role","forEach","user","username","password","console","log","set","registerUser","user2reg","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor(private cookieService: CookieService) {}\n  myUsersArray: User[] = [];\n  // Métodos que generen/devuelvan datos\n  getUsers(){\n    let auxiliar: User[] = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat',    'Soltero/a',    'Hombre', 'Musica', 'True'),\n                            new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer',  'Accesoris', 'True'),\n                            new User('user03', 'pass01', 'comprador', 'maria@mail.cat',     'Casat/da',     'Hombre', '', 'True'),\n                            ];\n\n    for (let i: number = 0; i < 20; i++) {\n      let j = Math.floor(Math.random() * 3);\n\n      this.myUsersArray.push(auxiliar[j]);\n    }\n  }\n  // Validate and return role of user\n  validateUser(usern: any, pass: any): string {\n    let role = '';\n    \n    this.myUsersArray.forEach(user => {\n      if (user.username === usern && user.password === pass) {\n        role = user.role\n        console.log(pass)\n        console.log(usern)\n\n        this.cookieService.set('username', user.username);\n        this.cookieService.set('role', user.role);\n\n      } \n    });\n    console.log(role)\n    return role\n  }\n\n  registerUser(user2reg: User): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}