{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthInterceptorService {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    let request = req;\n    if (token) {\n      request = req.clone({\n        setHeaders: {\n          authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err.status === 401) {\n        this.router.navigateByUrl('/login');\n      }\n      return throwError(err);\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.Router));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAEhD,MAAMC,KAAK,GAAgBC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAExD,IAAIC,OAAO,GAAGL,GAAG;IAEjB,IAAIE,KAAK,EAAE;MACTG,OAAO,GAAGL,GAAG,CAACM,KAAK,CAAC;QAClBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUN,KAAK;;OAEjC,CAAC;;IAGJ,OAAOD,IAAI,CAACQ,MAAM,CAACJ,OAAO,CAAC,CAACK,IAAI,CAC9Bf,UAAU,CAAEgB,GAAsB,IAAI;MAEpC,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtB,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,QAAQ,CAAC;;MAGrC,OAAOnB,UAAU,CAACiB,GAAG,CAAC;IACxB,CAAC,CAAC,CACH;EACH;;AA3BWf,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAkB,SAAtBlB,sBAAsB;EAAAmB,YAFrB;AAAM","names":["throwError","catchError","AuthInterceptorService","constructor","router","intercept","req","next","token","localStorage","getItem","request","clone","setHeaders","authorization","handle","pipe","err","status","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/app-uf4/src/app/interceptor/auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler ): Observable<HttpEvent<any>> {\n\n    const token: string|null = localStorage.getItem('token');\n\n    let request = req;\n\n    if (token) {\n      request = req.clone({\n        setHeaders: {\n          authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((err: HttpErrorResponse) => {\n        \n        if (err.status === 401) {\n          this.router.navigateByUrl('/login');\n        }\n\n        return throwError(err);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}