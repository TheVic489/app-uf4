{"ast":null,"code":"import { User } from '../model/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class UsersServiceService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n    this.myUsersArray = [];\n    // Métodos que generen/devuelvan datos\n    this.auxiliar = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat', 'Soltero/a', 'Hombre', 'Musica', 'True'), new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer', 'Accesoris', 'True'), new User('user03', 'pass01', 'comprador', 'maria@mail.cat', 'Casat/da', 'Hombre', '', 'True')];\n  }\n  // Validate and return role of user\n  validateUser(usern, pass) {\n    let role = '';\n    // Bucle for\n    for (let i = 0; i < this.myUsersArray.length; i++) {\n      if (user.username === usern && user.password === pass) {\n        role = user.role;\n        console.log(pass);\n        console.log(usern);\n        this.cookieService.set('username', user.username);\n        this.cookieService.set('role', user.role);\n      }\n      console.log(role);\n      return role;\n    }\n  }\n  //   this.myUsersArray.forEach(user => {\n  //   });\n  //   console.log(role)\n  //   return role\n  // }\n  registerUser(user2reg) {\n    this.myUsersArray.push(user2reg);\n  }\n}\nUsersServiceService.ɵfac = function UsersServiceService_Factory(t) {\n  return new (t || UsersServiceService)(i0.ɵɵinject(i1.CookieService));\n};\nUsersServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersServiceService,\n  factory: UsersServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;;;AAMpC,OAAM,MAAOC,mBAAmB;EAC9BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IACjC,iBAAY,GAAW,EAAE;IACzB;IAEA,aAAQ,GAAW,CAAC,IAAIH,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,iBAAiB,EAAK,WAAW,EAAK,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,EACvG,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,cAAc,EAAE,OAAO,EAAG,WAAW,EAAE,MAAM,CAAC,EAC9G,IAAIA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,gBAAgB,EAAM,UAAU,EAAM,QAAQ,EAAE,EAAE,EAAE,MAAM,CAAC,CACpG;EAP0B;EASrD;EACAI,YAAY,CAACC,KAAU,EAAEC,IAAS;IAChC,IAAIC,IAAI,GAAG,EAAE;IAEb;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,YAAY,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MACjD,IAAIG,IAAI,CAACC,QAAQ,KAAKP,KAAK,IAAIM,IAAI,CAACE,QAAQ,KAAKP,IAAI,EAAE;QACrDC,IAAI,GAAGI,IAAI,CAACJ,IAAI;QAChBO,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;QACjBQ,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;QAElB,IAAI,CAACF,aAAa,CAACa,GAAG,CAAC,UAAU,EAAEL,IAAI,CAACC,QAAQ,CAAC;QACjD,IAAI,CAACT,aAAa,CAACa,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACJ,IAAI,CAAC;;MAG3CO,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;MACjB,OAAOA,IAAI;;EAEf;EACE;EACA;EACA;EACA;EACA;EAEAU,YAAY,CAACC,QAAc;IACzB,IAAI,CAACT,YAAY,CAACU,IAAI,CAACD,QAAQ,CAAC;EAClC;;AArCWjB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAmB,SAAnBnB,mBAAmB;EAAAoB,YAFlB;AAAM","names":["User","UsersServiceService","constructor","cookieService","validateUser","usern","pass","role","i","myUsersArray","length","user","username","password","console","log","set","registerUser","user2reg","push","factory","providedIn"],"sourceRoot":"","sources":["/home/vic/dawbio2/m06-client/UF3/my-app-2/src/app/services/users-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/User';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersServiceService {\n  constructor(private cookieService: CookieService) {}\n  myUsersArray: User[] = [];\n  // Métodos que generen/devuelvan datos\n\n  auxiliar: User[] = [new User('user01', 'pass01', 'comprador', 'pepito@mail.cat',    'Soltero/a',    'Hombre', 'Musica', 'True'),\n                          new User('user02', 'pass01', 'comprador', 'alejandra@mail.cat', 'Divorciat/da', 'Mujer',  'Accesoris', 'True'),\n                          new User('user03', 'pass01', 'comprador', 'maria@mail.cat',     'Casat/da',     'Hombre', '', 'True'),\n                          ];\n\n// Validate and return role of user\nvalidateUser(usern: any, pass: any): string {\n  let role = '';\n  \n  // Bucle for\n  for (let i = 0; i < this.myUsersArray.length; i++) {\n    if (user.username === usern && user.password === pass) {\n      role = user.role\n      console.log(pass)\n      console.log(usern)\n\n      this.cookieService.set('username', user.username);\n      this.cookieService.set('role', user.role);\n\n    } \n    console.log(role)\n    return role\n  }\n}\n  //   this.myUsersArray.forEach(user => {\n  //   });\n  //   console.log(role)\n  //   return role\n  // }\n\n  registerUser(user2reg: User): any {\n    this.myUsersArray.push(user2reg);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}